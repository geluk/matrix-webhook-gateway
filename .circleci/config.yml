version: 2.1
orbs:
  node: circleci/node@4.7.0
executors:
  main:
    environment:
      IMAGE_NAME: geluk/matrix-webhook-gateway
    docker:
      # This image has both Node and Docker pre-installed,
      # so we can use it for everything.
    - image: cimg/node:16.7.0
jobs:
  npm-build:
    executor: main
    steps:
    - checkout
    - run:
        name: Check Node version
        command: node --version
    - node/install-packages
    - run:
        name: Run linter
        command: npm run lint
    - run:
        name: Run tests
        command: npm run test
    - run:
        name: Build project
        command: npm run build
    - run:
        name: Package project
        command: npm run dist
    - run:
        name: Compress artifacts
        command: tar -czf webhook-gateway.tar.gz ./webhook-gateway
        working_directory: ./out
    - persist_to_workspace:
        root: out
        paths:
          - webhook-gateway.tar.gz
          - VERSION
  docker-build:
    executor: main
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Build Docker image
        command: docker build -t $IMAGE_NAME:dev .
    - when:
        condition:
          matches:
            pattern: "^\\d+(\\.\\d+)?(\\.\\d+)?(-[a-z0-9]+)$"
            value: << pipeline.git.tag >>
        steps:
        - run:
            name: Tag pre-release image
            # We only tag pre-releases with the full version string,
            # because there probably won't be any scenario where you want
            # to pull in :0.1-pre0 instead of :0.1.0-pre0.
            # If anyone wants to track 'any release including pre-releases'
            # at some point in the future, we can add a :latest-pre tag.
            command: |
              docker tag $IMAGE_NAME:dev $IMAGE_NAME:$(./ci/tag.sh --patch)
    - when:
        condition:
          matches:
            pattern: "^\\d+(\\.\\d+)?(\\.\\d+)?$"
            value: << pipeline.git.tag >>
        steps:
        - run:
            name: Tag release image
            command: |
              docker tag $IMAGE_NAME:dev $IMAGE_NAME:latest
              docker tag $IMAGE_NAME:dev $IMAGE_NAME:$(./ci/tag.sh --major)
              docker tag $IMAGE_NAME:dev $IMAGE_NAME:$(./ci/tag.sh --minor)
              docker tag $IMAGE_NAME:dev $IMAGE_NAME:$(./ci/tag.sh --patch)
    - run:
        name: Publish Docker image
        command: |
          echo "$DOCKER_HUB_PW" | docker login -u "$DOCKER_HUB_USER" --password-stdin
          docker push $IMAGE_NAME:dev
  publish-github-release:
    docker:
    - image: cibuilds/github:0.10
    steps:
    - attach_workspace:
        at: ./out
    - run:
        name: Publish release
        command: echo Publishing for tag << pipeline.git.tag >>
    - run:
        name: Publish release
        command: |
          VERSION="$(<out/VERSION)"
          echo publishing $VERSION
          ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} \
            -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} \
            -draft -replace v${VERSION} out/webhook-gateway.tar.gz
workflows:
  build-and-test:
    jobs:
    - npm-build:
        # NPM build should run for tags as well as branches,
        # because it is a dependency of the next two jobs.
        filters:
          tags:
            only: /.*/
    - docker-build:
        # The Docker build job will always push the :dev tag,
        # and if a git tag is set, it will also push either a
        # pre-release tag or a release tag, so this job also
        # nees to run on al tags and branches.
        filters:
          tags:
            only: /.*/
        requires:
        - npm-build
    - publish-github-release:
        # Github releases should only be published on tag builds,
        # so we exclude all branches here.
        filters:
          tags:
            only: /^(\d+)(.\d+)?(.\d+)?(-[a-z0-9-]+)?$/
          branches:
            ignore: /.*/
        requires:
        - npm-build
