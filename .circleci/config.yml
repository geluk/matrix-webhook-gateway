version: 2.1
orbs:
  node: circleci/node@4.7.0
executors:
  main:
    environment:
      IMAGE_NAME: geluk/matrix-webhook-gateway
    docker:
      # This image has both Node and Docker pre-installed,
      # so we can use it for everything.
    - image: cimg/node:16.7.0
jobs:
  npm-build:
    executor: main
    steps:
    - checkout
    - run:
        name: Check Node version
        command: node --version
    - node/install-packages
    - run:
        name: Run linter
        command: npm run lint
    - run:
        name: Run tests
        command: npm run test
    - run:
        name: Build project
        command: npm run build
    - run:
        name: Package project
        command: npm run dist
    - run:
        name: Compress artifacts
        command: tar -czf webhook-gateway.tar.gz ./webhook-gateway
        working_directory: ./out
    - store_artifacts:
        path: ./out/webhook-gateway.tar.gz
        destination: webhook-gateway.tar.gz
  docker-build:
    executor: main
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Build Docker image
        command: docker build -t $IMAGE_NAME:dev .
    - when:
        condition:
          matches:
            pattern: "^\\d+(\\.\\d+)?(\\.\\d+)?(-[a-z0-9]+)$"
            value: << pipeline.git.tag >>
        steps:
        - run:
            name: Tag pre-release image
            # We only tag pre-releases with the full version string.
            command: |
              docker tag $IMAGE_NAME:dev $IMAGE_NAME:$(./ci/tag.sh --patch)
    - when:
        condition:
          matches:
            pattern: "^\\d+(\\.\\d+)?(\\.\\d+)?$"
            value: << pipeline.git.tag >>
        steps:
        - run:
            name: Tag release image
            command: |
              docker tag $IMAGE_NAME:dev $IMAGE_NAME:latest
              docker tag $IMAGE_NAME:dev $IMAGE_NAME:$(./ci/tag.sh --major)
              docker tag $IMAGE_NAME:dev $IMAGE_NAME:$(./ci/tag.sh --minor)
              docker tag $IMAGE_NAME:dev $IMAGE_NAME:$(./ci/tag.sh --patch)
    - run:
        name: Publish Docker image
        command: |
          echo "$DOCKER_HUB_PW" | docker login -u "$DOCKER_HUB_USER" --password-stdin
          docker push $IMAGE_NAME:dev
workflows:
  build-and-test:
    jobs:
    - docker-build:
        filters:
          tags:
            only: /.*/

    # - npm-build
    # - docker-publish:
    #     requires:
    #     - npm-build
